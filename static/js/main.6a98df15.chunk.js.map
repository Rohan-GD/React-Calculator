{"version":3,"sources":["components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","no1","no2","temp","HandleClickAdd","bind","HandleClickSub","HandleClickMulti","HandleClickDiv","HandleChange1","HandleChange2","this","setState","e","Number","target","value","class","id","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAkFeA,E,kDA9Eb,aACC,IAAD,8BACE,gBACKC,MAAO,CACVC,IAAM,EACNC,IAAM,EACNC,KAAM,GAGR,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,cAAgB,EAAKA,cAAcL,KAAnB,gBAbvB,E,6DAkBEM,KAAKC,SAAS,CACZT,KAAMQ,KAAKX,MAAMC,IAAMU,KAAKX,MAAME,Q,uCAKpCS,KAAKC,SAAS,CACZT,KAAMQ,KAAKX,MAAMC,IAAMU,KAAKX,MAAME,Q,yCAKpCS,KAAKC,SAAS,CACZT,KAAMQ,KAAKX,MAAMC,IAAIU,KAAKX,MAAME,Q,uCAKlCS,KAAKC,SAAS,CACZT,KAAMQ,KAAKX,MAAMC,IAAIU,KAAKX,MAAME,Q,oCAItBW,GACZF,KAAKC,SAAS,CAACX,IAAKa,OAAOD,EAAEE,OAAOC,W,oCAGxBH,GACZF,KAAKC,SAAS,CAACV,IAAKY,OAAOD,EAAEE,OAAOC,W,+BAMrC,OACE,yBAAKC,MAAM,QACX,6BAASA,MAAM,UACb,yBAAKA,MAAM,WACVN,KAAKX,MAAMG,MAEV,0BAAMc,MAAO,SACX,gDAAqB,6BACrB,2BAAQC,GAAG,UAAUF,MAASL,KAAKX,MAAMC,IAAMkB,SAAWR,KAAKF,iBACvD,6BACR,gDAAqB,6BACrB,2BAAOS,GAAG,UAAUF,MAASL,KAAKX,MAAME,IAAMiB,SAAWR,KAAKD,mBAIpE,6BAASO,MAAM,WACb,4BAAQG,QAAST,KAAKP,eAAgBa,MAAQ,UAA9C,KACA,4BAAQG,QAAST,KAAKL,eAAgBW,MAAQ,UAA9C,KACA,4BAAQG,QAAST,KAAKJ,iBAAkBU,MAAQ,YAAhD,KACA,4BAAQG,QAAST,KAAKH,eAAgBS,MAAQ,UAA9C,c,GA1EkBI,aCOVC,MALf,WACE,OACE,6BAAK,kBAAC,EAAD,QCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a98df15.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Calculator extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super()\r\n    this.state ={\r\n      no1 : 0,\r\n      no2 : 0,\r\n      temp: 0\r\n    }\r\n    //  bool = 'true'\r\n    this.HandleClickAdd = this.HandleClickAdd.bind(this);\r\n    this.HandleClickSub = this.HandleClickSub.bind(this);\r\n    this.HandleClickMulti = this.HandleClickMulti.bind(this);\r\n    this.HandleClickDiv = this.HandleClickDiv.bind(this);\r\n    this.HandleChange1 = this.HandleChange1.bind(this);\r\n    this.HandleChange2 = this.HandleChange2.bind(this);\r\n  }\r\n\r\n  HandleClickAdd()\r\n  {\r\n    this.setState({\r\n      temp: this.state.no1 + this.state.no2\r\n    })\r\n  }\r\n  HandleClickSub()\r\n  {\r\n    this.setState({\r\n      temp: this.state.no1 - this.state.no2\r\n    })\r\n  }\r\n  HandleClickMulti()\r\n  {\r\n    this.setState({\r\n      temp: this.state.no1*this.state.no2\r\n    })\r\n  }\r\n  HandleClickDiv()\r\n  {\r\n    this.setState({\r\n      temp: this.state.no1/this.state.no2\r\n    })\r\n  }\r\n\r\n  HandleChange1(e){\r\n    this.setState({no1: Number(e.target.value)})\r\n  }\r\n\r\n  HandleChange2(e){\r\n    this.setState({no2: Number(e.target.value)})\r\n  }\r\n\r\n\r\n\r\n render(){\r\n   return(\r\n     <div class=\"page\"> \r\n     <section class=\"screen\">\r\n       <div class=\"display\">\r\n       {this.state.temp}\r\n       </div>\r\n         <form class= \"input\">\r\n           <label>Enter number 1<br/>\r\n           <input  id=\"number1\" value = {this.state.no1}  onChange= {this.HandleChange1}/> \r\n           </label><br/>\r\n           <label>Enter number 2<br/>\r\n           <input id=\"number2\" value = {this.state.no2}  onChange= {this.HandleChange2}/> \r\n           </label>\r\n          </form>\r\n      </section>\r\n     <section class=\"buttons\">\r\n       <button onClick={this.HandleClickAdd} class = \"addbtn\">+</button>\r\n       <button onClick={this.HandleClickSub} class = \"subbtn\">-</button>\r\n       <button onClick={this.HandleClickMulti} class = \"multibtn\">x</button>\r\n       <button onClick={this.HandleClickDiv} class = \"divbtn\">รท</button>\r\n     </section>\r\n     </div>\r\n   )\r\n }\r\n} \r\nexport default Calculator","import React from 'react';\nimport './App.css';\nimport Calculator from './components/calculator'\n\nfunction App(){\n  return(\n    <div><Calculator/></div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}